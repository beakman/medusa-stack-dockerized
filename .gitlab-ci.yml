image: docker:23.0.1
services:
    - docker:23.0.1-dind

stages:
    - build
    - test
    - release
    - deploy

variables:
    TAG: $CI_COMMIT_REF_SLUG

build:
    stage: build
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker compose build --pull
        - docker compose push
    only:
        refs:
            - staging
            - main

release:
    stage: release
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker compose pull
        - docker tag $CI_REGISTRY_IMAGE:$TAG $CI_REGISTRY_IMAGE:latest
        - TAG=latest docker compose push
    only:
        refs:
            - main

deploy:staging:
    stage: deploy
    image: docker:stable
    script:
        - apk update && apk add openssh rsync
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | ssh-add -
        - mkdir ~/.ssh
        - chmod 700 ~/.ssh
        - |
            ssh "${TARGET_USER}@${TARGET_HOST}" \
            -oStrictHostKeyChecking=accept-new \
            "
            cd \"${TARGET_DIRECTORY}\" &&
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
            TAG=$TAG docker compose pull &&
            rm -rf ~/.docker &&
            TAG=$TAG docker compose \\
                up \\
                --detach \\
            &&
            docker image prune -f
            "
    environment:
        name: staging
        url: $STAGING_URL
    only:
        refs:
            - staging
            - main

deploy:production:
    stage: deploy
    image: docker:stable
    variables:
        TAG: 'latest'
    script:
        - apk update && apk add openssh rsync
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | ssh-add -
        - mkdir ~/.ssh
        - chmod 700 ~/.ssh
        - |
            ssh "${TARGET_USER}@${TARGET_HOST}" \
            -oStrictHostKeyChecking=accept-new \
            "
            cd \"${TARGET_DIRECTORY}\" &&
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
            TAG=$TAG docker compose pull &&
            rm -rf ~/.docker &&
            TAG=$TAG docker compose \\
                up \\
                --detach \\
            &&
            docker image prune -f
            "
    environment:
        name: production
        url: $PRODUCTION_URL
    when: manual
    only:
        refs:
            - main