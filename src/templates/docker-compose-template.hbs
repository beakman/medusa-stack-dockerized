services:
  medusa_server:
    build: .
    environment:
      MEDUSA_ADMIN_ONBOARDING_TYPE: {{medusaAdminOnboardingType}}
      STORE_CORS: {{storeCors}}
      ADMIN_CORS: {{adminCors}}
      AUTH_CORS: {{authCors}}
      REDIS_URL: {{redisUrl}}
      JWT_SECRET: {{jwtSecret}}
      COOKIE_SECRET: {{cookieSecret}}
      DATABASE_URL: {{dbUrl}}
      DISABLE_MEDUSA_ADMIN: false
      MEDUSA_WORKER_MODE: server
    {{#if createPgContainer}}
    depends_on:
      postgres:
        condition: service_healthy
    {{/if}}
    {{#if createRedisContainer}}
      redis:
        condition: service_healthy
    {{/if}}
    command: sh -c "{{startCommand}}"
    volumes:
      - ./medusa-config.ts:/app/medusa-config.ts
    ports:
      - 9000:9000

  medusa_worker:
    build: .
    environment:
      MEDUSA_ADMIN_ONBOARDING_TYPE: {{medusaAdminOnboardingType}}
      STORE_CORS: {{storeCors}}
      ADMIN_CORS: {{adminCors}}
      AUTH_CORS: {{authCors}}
      REDIS_URL: {{redisUrl}}
      JWT_SECRET: {{jwtSecret}}
      COOKIE_SECRET: {{cookieSecret}}
      DATABASE_URL: {{dbUrl}}
      DISABLE_MEDUSA_ADMIN: true
      MEDUSA_WORKER_MODE: worker
    {{#if createPgContainer}}
    depends_on:
      postgres:
        condition: service_healthy
    {{/if}}
    {{#if createRedisContainer}}
      redis:
        condition: service_healthy
    {{/if}}
    command: sh -c "npx medusa db:migrate && yarn start"
    ports:
      - 9000:9000

  {{#if createPgContainer}}
  postgres:
    image: postgres:17
    hostname: postgres
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: {{dbUser}}
      POSTGRES_PASSWORD: {{dbPassword}}
      POSTGRES_DB: {{dbName}}
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - 5432
  {{/if}}

  {{#if createRedisContainer}}
  redis:
    image: redis:alpine
    hostname: redis
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
  {{/if}}