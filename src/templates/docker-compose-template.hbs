services:
  medusa_server:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      MEDUSA_BACKEND_URL: http://localhost:9000
      DISABLE_MEDUSA_ADMIN: false
      MEDUSA_WORKER_MODE: server
    depends_on:
    {{#if createPgContainer}}
      postgres:
        condition: service_healthy
    {{/if}}
    {{#if createRedisContainer}}
      redis:
        condition: service_healthy
    {{/if}}
    command: sh -c "{{{startCommand}}}"
    volumes:
      - ./medusa-config.ts:/app/medusa-config.ts
      - ./uploads:/app/uploads
    ports:
      - 9000:9000
    restart: always      

  medusa_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      MEDUSA_BACKEND_URL: http://localhost:9000
      DISABLE_MEDUSA_ADMIN: true
      MEDUSA_WORKER_MODE: worker
    depends_on:
      medusa_server:
        condition: service_started
    {{#if createPgContainer}}
      postgres:
        condition: service_healthy
    {{/if}}
    {{#if createRedisContainer}}
      redis:
        condition: service_healthy
    {{/if}}
    command: sh -c "yarn start"
    restart: always

  {{#if createStorefront}}
  storefront:
    build:
      context: .
      dockerfile: Dockerfile.storefront.dev
    depends_on:
      medusa_server:
        condition: service_started
    command: sh -c "yarn dev"
    ports:
      - 8000:8000
  {{/if}}

  {{#if createPgContainer}}
  postgres:
    image: postgres:17
    hostname: postgres
    restart: always
    container_name: postgres    
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - 5432
    volumes:
      - db-data:/var/lib/postgresql/data
  {{/if}}

  {{#if createRedisContainer}}
  redis:
    image: redis:alpine
    hostname: redis
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
  {{/if}}

  {{#if createMinioContainer}}
  minio:
    image: minio/minio:latest
    ports:
      - '9100:9000'
      - '9101:9001'
    volumes:
      - uploads:/data    
    command: server --console-address ":9001" /data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-create:
    image: minio/mc:latest
    container_name: minio-create
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio http://minio:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY;
      /usr/bin/mc mb minio/$MINIO_BUCKET;
      /usr/bin/mc policy set download minio/$MINIO_BUCKET;
      exit 0;
      "
  {{/if}}
  
  {{#if createMeilisearchContainer}}
  melisearch:
    image: getmeili/meilisearch:latest
    ports:
      - 7700:7700
  {{/if}}
volumes:
  db-data:
  uploads: